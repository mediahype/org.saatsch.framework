package org.saatsch.framework.base.jfxbase.demo.dataeditor;

import org.joda.beans.Bean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class DemoBean implements Bean {

  @PropertyDefinition
  private List<DemoInnerBean> list = new ArrayList<>();

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code DemoBean}.
     * @return the meta-bean, not null
     */
    public static DemoBean.Meta meta() {
        return DemoBean.Meta.INSTANCE;
    }

    static {
        MetaBean.register(DemoBean.Meta.INSTANCE);
    }

    @Override
    public DemoBean.Meta metaBean() {
        return DemoBean.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the list.
     * @return the value of the property
     */
    public List<DemoInnerBean> getList() {
        return list;
    }

    /**
     * Sets the list.
     * @param list  the new value of the property
     */
    public void setList(List<DemoInnerBean> list) {
        this.list = list;
    }

    /**
     * Gets the the {@code list} property.
     * @return the property, not null
     */
    public final Property<List<DemoInnerBean>> list() {
        return metaBean().list().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public DemoBean clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            DemoBean other = (DemoBean) obj;
            return JodaBeanUtils.equal(getList(), other.getList());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getList());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(64);
        buf.append("DemoBean{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("list").append('=').append(JodaBeanUtils.toString(getList())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code DemoBean}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code list} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<DemoInnerBean>> list = DirectMetaProperty.ofReadWrite(
                this, "list", DemoBean.class, (Class) List.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "list");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3322014:  // list
                    return list;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends DemoBean> builder() {
            return new DirectBeanBuilder<>(new DemoBean());
        }

        @Override
        public Class<? extends DemoBean> beanType() {
            return DemoBean.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code list} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<DemoInnerBean>> list() {
            return list;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3322014:  // list
                    return ((DemoBean) bean).getList();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3322014:  // list
                    ((DemoBean) bean).setList((List<DemoInnerBean>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
