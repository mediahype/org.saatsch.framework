package org.saatsch.framework.base.jfxbase.demo.beantable;

import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;

@BeanDefinition
public class DemoBean implements Bean {

  @PropertyDefinition
  private String someString;
  
  @PropertyDefinition
  private DemoNestedBean nestedBean = new DemoNestedBean();
  
  
    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code DemoBean}.
     * @return the meta-bean, not null
     */
    public static DemoBean.Meta meta() {
        return DemoBean.Meta.INSTANCE;
    }

    static {
        MetaBean.register(DemoBean.Meta.INSTANCE);
    }

    @Override
    public DemoBean.Meta metaBean() {
        return DemoBean.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the someString.
     * @return the value of the property
     */
    public String getSomeString() {
        return someString;
    }

    /**
     * Sets the someString.
     * @param someString  the new value of the property
     */
    public void setSomeString(String someString) {
        this.someString = someString;
    }

    /**
     * Gets the the {@code someString} property.
     * @return the property, not null
     */
    public final Property<String> someString() {
        return metaBean().someString().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the nestedBean.
     * @return the value of the property
     */
    public DemoNestedBean getNestedBean() {
        return nestedBean;
    }

    /**
     * Sets the nestedBean.
     * @param nestedBean  the new value of the property
     */
    public void setNestedBean(DemoNestedBean nestedBean) {
        this.nestedBean = nestedBean;
    }

    /**
     * Gets the the {@code nestedBean} property.
     * @return the property, not null
     */
    public final Property<DemoNestedBean> nestedBean() {
        return metaBean().nestedBean().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public DemoBean clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            DemoBean other = (DemoBean) obj;
            return JodaBeanUtils.equal(getSomeString(), other.getSomeString()) &&
                    JodaBeanUtils.equal(getNestedBean(), other.getNestedBean());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getSomeString());
        hash = hash * 31 + JodaBeanUtils.hashCode(getNestedBean());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("DemoBean{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("someString").append('=').append(JodaBeanUtils.toString(getSomeString())).append(',').append(' ');
        buf.append("nestedBean").append('=').append(JodaBeanUtils.toString(getNestedBean())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code DemoBean}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code someString} property.
         */
        private final MetaProperty<String> someString = DirectMetaProperty.ofReadWrite(
                this, "someString", DemoBean.class, String.class);
        /**
         * The meta-property for the {@code nestedBean} property.
         */
        private final MetaProperty<DemoNestedBean> nestedBean = DirectMetaProperty.ofReadWrite(
                this, "nestedBean", DemoBean.class, DemoNestedBean.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "someString",
                "nestedBean");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -1264993755:  // someString
                    return someString;
                case -889023161:  // nestedBean
                    return nestedBean;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends DemoBean> builder() {
            return new DirectBeanBuilder<>(new DemoBean());
        }

        @Override
        public Class<? extends DemoBean> beanType() {
            return DemoBean.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code someString} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> someString() {
            return someString;
        }

        /**
         * The meta-property for the {@code nestedBean} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<DemoNestedBean> nestedBean() {
            return nestedBean;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1264993755:  // someString
                    return ((DemoBean) bean).getSomeString();
                case -889023161:  // nestedBean
                    return ((DemoBean) bean).getNestedBean();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1264993755:  // someString
                    ((DemoBean) bean).setSomeString((String) newValue);
                    return;
                case -889023161:  // nestedBean
                    ((DemoBean) bean).setNestedBean((DemoNestedBean) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
