package org.saatsch.framework.base.jfxbase.demo.dataeditor;

import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.saatsch.framework.base.jfxbase.dataeditor.DataEditor;

import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;

@BeanDefinition
public class DemoInnerBean implements Bean {

  @PropertyDefinition
  @DataEditor(columnWidth = 200)
  private String user = "";

  @PropertyDefinition
  private String password = "";

  @PropertyDefinition
  @DataEditor(columnWidth = 20)
  private Integer number = 1;


    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code DemoInnerBean}.
     * @return the meta-bean, not null
     */
    public static DemoInnerBean.Meta meta() {
        return DemoInnerBean.Meta.INSTANCE;
    }

    static {
        MetaBean.register(DemoInnerBean.Meta.INSTANCE);
    }

    @Override
    public DemoInnerBean.Meta metaBean() {
        return DemoInnerBean.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the user.
     * @return the value of the property
     */
    public String getUser() {
        return user;
    }

    /**
     * Sets the user.
     * @param user  the new value of the property
     */
    public void setUser(String user) {
        this.user = user;
    }

    /**
     * Gets the the {@code user} property.
     * @return the property, not null
     */
    public final Property<String> user() {
        return metaBean().user().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the password.
     * @return the value of the property
     */
    public String getPassword() {
        return password;
    }

    /**
     * Sets the password.
     * @param password  the new value of the property
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Gets the the {@code password} property.
     * @return the property, not null
     */
    public final Property<String> password() {
        return metaBean().password().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the number.
     * @return the value of the property
     */
    public Integer getNumber() {
        return number;
    }

    /**
     * Sets the number.
     * @param number  the new value of the property
     */
    public void setNumber(Integer number) {
        this.number = number;
    }

    /**
     * Gets the the {@code number} property.
     * @return the property, not null
     */
    public final Property<Integer> number() {
        return metaBean().number().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public DemoInnerBean clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            DemoInnerBean other = (DemoInnerBean) obj;
            return JodaBeanUtils.equal(getUser(), other.getUser()) &&
                    JodaBeanUtils.equal(getPassword(), other.getPassword()) &&
                    JodaBeanUtils.equal(getNumber(), other.getNumber());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getUser());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPassword());
        hash = hash * 31 + JodaBeanUtils.hashCode(getNumber());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(128);
        buf.append("DemoInnerBean{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("user").append('=').append(JodaBeanUtils.toString(getUser())).append(',').append(' ');
        buf.append("password").append('=').append(JodaBeanUtils.toString(getPassword())).append(',').append(' ');
        buf.append("number").append('=').append(JodaBeanUtils.toString(getNumber())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code DemoInnerBean}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code user} property.
         */
        private final MetaProperty<String> user = DirectMetaProperty.ofReadWrite(
                this, "user", DemoInnerBean.class, String.class);
        /**
         * The meta-property for the {@code password} property.
         */
        private final MetaProperty<String> password = DirectMetaProperty.ofReadWrite(
                this, "password", DemoInnerBean.class, String.class);
        /**
         * The meta-property for the {@code number} property.
         */
        private final MetaProperty<Integer> number = DirectMetaProperty.ofReadWrite(
                this, "number", DemoInnerBean.class, Integer.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "user",
                "password",
                "number");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3599307:  // user
                    return user;
                case 1216985755:  // password
                    return password;
                case -1034364087:  // number
                    return number;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends DemoInnerBean> builder() {
            return new DirectBeanBuilder<>(new DemoInnerBean());
        }

        @Override
        public Class<? extends DemoInnerBean> beanType() {
            return DemoInnerBean.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code user} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> user() {
            return user;
        }

        /**
         * The meta-property for the {@code password} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> password() {
            return password;
        }

        /**
         * The meta-property for the {@code number} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> number() {
            return number;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3599307:  // user
                    return ((DemoInnerBean) bean).getUser();
                case 1216985755:  // password
                    return ((DemoInnerBean) bean).getPassword();
                case -1034364087:  // number
                    return ((DemoInnerBean) bean).getNumber();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3599307:  // user
                    ((DemoInnerBean) bean).setUser((String) newValue);
                    return;
                case 1216985755:  // password
                    ((DemoInnerBean) bean).setPassword((String) newValue);
                    return;
                case -1034364087:  // number
                    ((DemoInnerBean) bean).setNumber((Integer) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
