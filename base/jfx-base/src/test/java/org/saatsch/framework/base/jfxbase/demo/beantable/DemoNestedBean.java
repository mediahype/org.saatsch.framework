package org.saatsch.framework.base.jfxbase.demo.beantable;

import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;

@BeanDefinition
public class DemoNestedBean implements Bean {

  @PropertyDefinition
  private String foo;
  
  @PropertyDefinition
  private List<String> stringList = new ArrayList<>();

  @PropertyDefinition
  private List<Bean> beanList = new ArrayList<>();
  
    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code DemoNestedBean}.
     * @return the meta-bean, not null
     */
    public static DemoNestedBean.Meta meta() {
        return DemoNestedBean.Meta.INSTANCE;
    }

    static {
        MetaBean.register(DemoNestedBean.Meta.INSTANCE);
    }

    @Override
    public DemoNestedBean.Meta metaBean() {
        return DemoNestedBean.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the foo.
     * @return the value of the property
     */
    public String getFoo() {
        return foo;
    }

    /**
     * Sets the foo.
     * @param foo  the new value of the property
     */
    public void setFoo(String foo) {
        this.foo = foo;
    }

    /**
     * Gets the the {@code foo} property.
     * @return the property, not null
     */
    public final Property<String> foo() {
        return metaBean().foo().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the stringList.
     * @return the value of the property
     */
    public List<String> getStringList() {
        return stringList;
    }

    /**
     * Sets the stringList.
     * @param stringList  the new value of the property
     */
    public void setStringList(List<String> stringList) {
        this.stringList = stringList;
    }

    /**
     * Gets the the {@code stringList} property.
     * @return the property, not null
     */
    public final Property<List<String>> stringList() {
        return metaBean().stringList().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the beanList.
     * @return the value of the property
     */
    public List<Bean> getBeanList() {
        return beanList;
    }

    /**
     * Sets the beanList.
     * @param beanList  the new value of the property
     */
    public void setBeanList(List<Bean> beanList) {
        this.beanList = beanList;
    }

    /**
     * Gets the the {@code beanList} property.
     * @return the property, not null
     */
    public final Property<List<Bean>> beanList() {
        return metaBean().beanList().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public DemoNestedBean clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            DemoNestedBean other = (DemoNestedBean) obj;
            return JodaBeanUtils.equal(getFoo(), other.getFoo()) &&
                    JodaBeanUtils.equal(getStringList(), other.getStringList()) &&
                    JodaBeanUtils.equal(getBeanList(), other.getBeanList());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getFoo());
        hash = hash * 31 + JodaBeanUtils.hashCode(getStringList());
        hash = hash * 31 + JodaBeanUtils.hashCode(getBeanList());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(128);
        buf.append("DemoNestedBean{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("foo").append('=').append(JodaBeanUtils.toString(getFoo())).append(',').append(' ');
        buf.append("stringList").append('=').append(JodaBeanUtils.toString(getStringList())).append(',').append(' ');
        buf.append("beanList").append('=').append(JodaBeanUtils.toString(getBeanList())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code DemoNestedBean}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code foo} property.
         */
        private final MetaProperty<String> foo = DirectMetaProperty.ofReadWrite(
                this, "foo", DemoNestedBean.class, String.class);
        /**
         * The meta-property for the {@code stringList} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<String>> stringList = DirectMetaProperty.ofReadWrite(
                this, "stringList", DemoNestedBean.class, (Class) List.class);
        /**
         * The meta-property for the {@code beanList} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<Bean>> beanList = DirectMetaProperty.ofReadWrite(
                this, "beanList", DemoNestedBean.class, (Class) List.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "foo",
                "stringList",
                "beanList");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 101574:  // foo
                    return foo;
                case -1573317553:  // stringList
                    return stringList;
                case 1321263214:  // beanList
                    return beanList;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends DemoNestedBean> builder() {
            return new DirectBeanBuilder<>(new DemoNestedBean());
        }

        @Override
        public Class<? extends DemoNestedBean> beanType() {
            return DemoNestedBean.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code foo} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> foo() {
            return foo;
        }

        /**
         * The meta-property for the {@code stringList} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<String>> stringList() {
            return stringList;
        }

        /**
         * The meta-property for the {@code beanList} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<Bean>> beanList() {
            return beanList;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 101574:  // foo
                    return ((DemoNestedBean) bean).getFoo();
                case -1573317553:  // stringList
                    return ((DemoNestedBean) bean).getStringList();
                case 1321263214:  // beanList
                    return ((DemoNestedBean) bean).getBeanList();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 101574:  // foo
                    ((DemoNestedBean) bean).setFoo((String) newValue);
                    return;
                case -1573317553:  // stringList
                    ((DemoNestedBean) bean).setStringList((List<String>) newValue);
                    return;
                case 1321263214:  // beanList
                    ((DemoNestedBean) bean).setBeanList((List<Bean>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
