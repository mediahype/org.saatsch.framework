package de.osrg.base.jface.beantree;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class TestBean implements Bean {

  @PropertyDefinition
  private List<String> stringList = new ArrayList<>();
  
  @PropertyDefinition
  private List<? extends Bean> wildcardList = new ArrayList<>();
  
  @PropertyDefinition
  private String string = "";
  
  
    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code TestBean}.
     * @return the meta-bean, not null
     */
    public static TestBean.Meta meta() {
        return TestBean.Meta.INSTANCE;
    }

    static {
        MetaBean.register(TestBean.Meta.INSTANCE);
    }

    @Override
    public TestBean.Meta metaBean() {
        return TestBean.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the stringList.
     * @return the value of the property
     */
    public List<String> getStringList() {
        return stringList;
    }

    /**
     * Sets the stringList.
     * @param stringList  the new value of the property
     */
    public void setStringList(List<String> stringList) {
        this.stringList = stringList;
    }

    /**
     * Gets the the {@code stringList} property.
     * @return the property, not null
     */
    public final Property<List<String>> stringList() {
        return metaBean().stringList().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the wildcardList.
     * @return the value of the property
     */
    public List<? extends Bean> getWildcardList() {
        return wildcardList;
    }

    /**
     * Sets the wildcardList.
     * @param wildcardList  the new value of the property
     */
    public void setWildcardList(List<? extends Bean> wildcardList) {
        this.wildcardList = wildcardList;
    }

    /**
     * Gets the the {@code wildcardList} property.
     * @return the property, not null
     */
    public final Property<List<? extends Bean>> wildcardList() {
        return metaBean().wildcardList().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the string.
     * @return the value of the property
     */
    public String getString() {
        return string;
    }

    /**
     * Sets the string.
     * @param string  the new value of the property
     */
    public void setString(String string) {
        this.string = string;
    }

    /**
     * Gets the the {@code string} property.
     * @return the property, not null
     */
    public final Property<String> string() {
        return metaBean().string().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public TestBean clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            TestBean other = (TestBean) obj;
            return JodaBeanUtils.equal(getStringList(), other.getStringList()) &&
                    JodaBeanUtils.equal(getWildcardList(), other.getWildcardList()) &&
                    JodaBeanUtils.equal(getString(), other.getString());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getStringList());
        hash = hash * 31 + JodaBeanUtils.hashCode(getWildcardList());
        hash = hash * 31 + JodaBeanUtils.hashCode(getString());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(128);
        buf.append("TestBean{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("stringList").append('=').append(JodaBeanUtils.toString(getStringList())).append(',').append(' ');
        buf.append("wildcardList").append('=').append(JodaBeanUtils.toString(getWildcardList())).append(',').append(' ');
        buf.append("string").append('=').append(JodaBeanUtils.toString(getString())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code TestBean}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code stringList} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<String>> stringList = DirectMetaProperty.ofReadWrite(
                this, "stringList", TestBean.class, (Class) List.class);
        /**
         * The meta-property for the {@code wildcardList} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<? extends Bean>> wildcardList = DirectMetaProperty.ofReadWrite(
                this, "wildcardList", TestBean.class, (Class) List.class);
        /**
         * The meta-property for the {@code string} property.
         */
        private final MetaProperty<String> string = DirectMetaProperty.ofReadWrite(
                this, "string", TestBean.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "stringList",
                "wildcardList",
                "string");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -1573317553:  // stringList
                    return stringList;
                case -1634280040:  // wildcardList
                    return wildcardList;
                case -891985903:  // string
                    return string;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends TestBean> builder() {
            return new DirectBeanBuilder<>(new TestBean());
        }

        @Override
        public Class<? extends TestBean> beanType() {
            return TestBean.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code stringList} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<String>> stringList() {
            return stringList;
        }

        /**
         * The meta-property for the {@code wildcardList} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<? extends Bean>> wildcardList() {
            return wildcardList;
        }

        /**
         * The meta-property for the {@code string} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> string() {
            return string;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1573317553:  // stringList
                    return ((TestBean) bean).getStringList();
                case -1634280040:  // wildcardList
                    return ((TestBean) bean).getWildcardList();
                case -891985903:  // string
                    return ((TestBean) bean).getString();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1573317553:  // stringList
                    ((TestBean) bean).setStringList((List<String>) newValue);
                    return;
                case -1634280040:  // wildcardList
                    ((TestBean) bean).setWildcardList((List<? extends Bean>) newValue);
                    return;
                case -891985903:  // string
                    ((TestBean) bean).setString((String) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
