package org.saatsch.framework.base.util.textformat;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.saatsch.framework.base.util.KeyValuePair;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class KeyValueSupport implements Bean {

  @PropertyDefinition
  private List<KeyValuePair> keysValues = new ArrayList<KeyValuePair>();


  public KeyValuePair getKeyValuePairByKey(String key) {
    for (KeyValuePair kvp : keysValues) {
      if (kvp.getKey().equals(key)) {
        return kvp;
      }
    }
    return null;
  }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code KeyValueSupport}.
     * @return the meta-bean, not null
     */
    public static KeyValueSupport.Meta meta() {
        return KeyValueSupport.Meta.INSTANCE;
    }

    static {
        MetaBean.register(KeyValueSupport.Meta.INSTANCE);
    }

    @Override
    public KeyValueSupport.Meta metaBean() {
        return KeyValueSupport.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the keysValues.
     * @return the value of the property
     */
    public List<KeyValuePair> getKeysValues() {
        return keysValues;
    }

    /**
     * Sets the keysValues.
     * @param keysValues  the new value of the property
     */
    public void setKeysValues(List<KeyValuePair> keysValues) {
        this.keysValues = keysValues;
    }

    /**
     * Gets the the {@code keysValues} property.
     * @return the property, not null
     */
    public final Property<List<KeyValuePair>> keysValues() {
        return metaBean().keysValues().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public KeyValueSupport clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            KeyValueSupport other = (KeyValueSupport) obj;
            return JodaBeanUtils.equal(getKeysValues(), other.getKeysValues());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getKeysValues());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(64);
        buf.append("KeyValueSupport{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("keysValues").append('=').append(JodaBeanUtils.toString(getKeysValues())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code KeyValueSupport}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code keysValues} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<KeyValuePair>> keysValues = DirectMetaProperty.ofReadWrite(
                this, "keysValues", KeyValueSupport.class, (Class) List.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "keysValues");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 248999990:  // keysValues
                    return keysValues;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends KeyValueSupport> builder() {
            return new DirectBeanBuilder<>(new KeyValueSupport());
        }

        @Override
        public Class<? extends KeyValueSupport> beanType() {
            return KeyValueSupport.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code keysValues} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<KeyValuePair>> keysValues() {
            return keysValues;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 248999990:  // keysValues
                    return ((KeyValueSupport) bean).getKeysValues();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 248999990:  // keysValues
                    ((KeyValueSupport) bean).setKeysValues((List<KeyValuePair>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
