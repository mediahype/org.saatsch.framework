package org.saatsch.framework.base.util;

import org.joda.beans.Bean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import java.util.Map;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * because everybody needs a key value pair.
 * 
 * @author saatsch
 *
 */
@BeanDefinition
public class KeyValuePair implements Bean  {

  @PropertyDefinition
  private String key;
  
  @PropertyDefinition
  private Object value;

  private KeyValuePair() {
    
  }
  
  /**
   * constructs a {@link KeyValuePair}
   * 
   * @param key the key. cannot be empty
   * @param value the value.
   * @throws IllegalArgumentException if the key is empty.
   */
  public KeyValuePair(String key, Object value) {
    super();
    if (null == key || key.length() == 0) {
      throw new IllegalArgumentException("key cannot be empty");
    }
    this.key = key;
    this.value = value;
  }

  
    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code KeyValuePair}.
     * @return the meta-bean, not null
     */
    public static KeyValuePair.Meta meta() {
        return KeyValuePair.Meta.INSTANCE;
    }

    static {
        MetaBean.register(KeyValuePair.Meta.INSTANCE);
    }

    @Override
    public KeyValuePair.Meta metaBean() {
        return KeyValuePair.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the key.
     * @return the value of the property
     */
    public String getKey() {
        return key;
    }

    /**
     * Sets the key.
     * @param key  the new value of the property
     */
    public void setKey(String key) {
        this.key = key;
    }

    /**
     * Gets the the {@code key} property.
     * @return the property, not null
     */
    public final Property<String> key() {
        return metaBean().key().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the value.
     * @return the value of the property
     */
    public Object getValue() {
        return value;
    }

    /**
     * Sets the value.
     * @param value  the new value of the property
     */
    public void setValue(Object value) {
        this.value = value;
    }

    /**
     * Gets the the {@code value} property.
     * @return the property, not null
     */
    public final Property<Object> value() {
        return metaBean().value().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public KeyValuePair clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            KeyValuePair other = (KeyValuePair) obj;
            return JodaBeanUtils.equal(getKey(), other.getKey()) &&
                    JodaBeanUtils.equal(getValue(), other.getValue());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getKey());
        hash = hash * 31 + JodaBeanUtils.hashCode(getValue());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("KeyValuePair{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("key").append('=').append(JodaBeanUtils.toString(getKey())).append(',').append(' ');
        buf.append("value").append('=').append(JodaBeanUtils.toString(getValue())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code KeyValuePair}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code key} property.
         */
        private final MetaProperty<String> key = DirectMetaProperty.ofReadWrite(
                this, "key", KeyValuePair.class, String.class);
        /**
         * The meta-property for the {@code value} property.
         */
        private final MetaProperty<Object> value = DirectMetaProperty.ofReadWrite(
                this, "value", KeyValuePair.class, Object.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "key",
                "value");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 106079:  // key
                    return key;
                case 111972721:  // value
                    return value;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends KeyValuePair> builder() {
            return new DirectBeanBuilder<>(new KeyValuePair());
        }

        @Override
        public Class<? extends KeyValuePair> beanType() {
            return KeyValuePair.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code key} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> key() {
            return key;
        }

        /**
         * The meta-property for the {@code value} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Object> value() {
            return value;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 106079:  // key
                    return ((KeyValuePair) bean).getKey();
                case 111972721:  // value
                    return ((KeyValuePair) bean).getValue();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 106079:  // key
                    ((KeyValuePair) bean).setKey((String) newValue);
                    return;
                case 111972721:  // value
                    ((KeyValuePair) bean).setValue((Object) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
