package de.osrg.base.beans.change;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.MetaBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

/**
 * an element of a path to a bean property.
 * 
 * @author saatsch
 *
 */
@BeanDefinition
public final class PropertyPathElement implements ImmutableBean, Serializable {

  private static final long serialVersionUID = 1L;

  /**
   * the name of the property. The type of the property must either be a Bean or a List of Beans.
   */
  @PropertyDefinition(validate = "notEmpty")
  private final String propName;

  /**
   * if the property given by {@link #propName}is a List, then the Bean at this index
   * inside the List is the bean pointed at by this PropertyPathElement. If this is
   * <code>null</code> then the property is a Bean. If this is not <code>null</code> then the
   * pointed at property is a List.
   */
  @PropertyDefinition
  private final Integer indexInList;

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code PropertyPathElement}.
     * @return the meta-bean, not null
     */
    public static PropertyPathElement.Meta meta() {
        return PropertyPathElement.Meta.INSTANCE;
    }

    static {
        MetaBean.register(PropertyPathElement.Meta.INSTANCE);
    }

    /**
     * Returns a builder used to create an instance of the bean.
     * @return the builder, not null
     */
    public static PropertyPathElement.Builder builder() {
        return new PropertyPathElement.Builder();
    }

    private PropertyPathElement(
            String propName,
            Integer indexInList) {
        JodaBeanUtils.notEmpty(propName, "propName");
        this.propName = propName;
        this.indexInList = indexInList;
    }

    @Override
    public PropertyPathElement.Meta metaBean() {
        return PropertyPathElement.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the name of the property. The type of the property must either be a Bean or a List of Beans.
     * @return the value of the property, not empty
     */
    public String getPropName() {
        return propName;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets if the property given by {@link #propName}is a List, then the Bean at this index
     * inside the List is the bean pointed at by this PropertyPathElement. If this is
     * <code>null</code> then the property is a Bean. If this is not <code>null</code> then the
     * pointed at property is a List.
     * @return the value of the property
     */
    public Integer getIndexInList() {
        return indexInList;
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a builder that allows this bean to be mutated.
     * @return the mutable builder, not null
     */
    public Builder toBuilder() {
        return new Builder(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            PropertyPathElement other = (PropertyPathElement) obj;
            return JodaBeanUtils.equal(propName, other.propName) &&
                    JodaBeanUtils.equal(indexInList, other.indexInList);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(propName);
        hash = hash * 31 + JodaBeanUtils.hashCode(indexInList);
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("PropertyPathElement{");
        buf.append("propName").append('=').append(propName).append(',').append(' ');
        buf.append("indexInList").append('=').append(JodaBeanUtils.toString(indexInList));
        buf.append('}');
        return buf.toString();
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code PropertyPathElement}.
     */
    public static final class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code propName} property.
         */
        private final MetaProperty<String> propName = DirectMetaProperty.ofImmutable(
                this, "propName", PropertyPathElement.class, String.class);
        /**
         * The meta-property for the {@code indexInList} property.
         */
        private final MetaProperty<Integer> indexInList = DirectMetaProperty.ofImmutable(
                this, "indexInList", PropertyPathElement.class, Integer.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "propName",
                "indexInList");

        /**
         * Restricted constructor.
         */
        private Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -993843058:  // propName
                    return propName;
                case 1050527445:  // indexInList
                    return indexInList;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public PropertyPathElement.Builder builder() {
            return new PropertyPathElement.Builder();
        }

        @Override
        public Class<? extends PropertyPathElement> beanType() {
            return PropertyPathElement.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code propName} property.
         * @return the meta-property, not null
         */
        public MetaProperty<String> propName() {
            return propName;
        }

        /**
         * The meta-property for the {@code indexInList} property.
         * @return the meta-property, not null
         */
        public MetaProperty<Integer> indexInList() {
            return indexInList;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -993843058:  // propName
                    return ((PropertyPathElement) bean).getPropName();
                case 1050527445:  // indexInList
                    return ((PropertyPathElement) bean).getIndexInList();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            metaProperty(propertyName);
            if (quiet) {
                return;
            }
            throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
        }

    }

    //-----------------------------------------------------------------------
    /**
     * The bean-builder for {@code PropertyPathElement}.
     */
    public static final class Builder extends DirectFieldsBeanBuilder<PropertyPathElement> {

        private String propName;
        private Integer indexInList;

        /**
         * Restricted constructor.
         */
        private Builder() {
        }

        /**
         * Restricted copy constructor.
         * @param beanToCopy  the bean to copy from, not null
         */
        private Builder(PropertyPathElement beanToCopy) {
            this.propName = beanToCopy.getPropName();
            this.indexInList = beanToCopy.getIndexInList();
        }

        //-----------------------------------------------------------------------
        @Override
        public Object get(String propertyName) {
            switch (propertyName.hashCode()) {
                case -993843058:  // propName
                    return propName;
                case 1050527445:  // indexInList
                    return indexInList;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
        }

        @Override
        public Builder set(String propertyName, Object newValue) {
            switch (propertyName.hashCode()) {
                case -993843058:  // propName
                    this.propName = (String) newValue;
                    break;
                case 1050527445:  // indexInList
                    this.indexInList = (Integer) newValue;
                    break;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
            return this;
        }

        @Override
        public Builder set(MetaProperty<?> property, Object value) {
            super.set(property, value);
            return this;
        }

        @Override
        public PropertyPathElement build() {
            return new PropertyPathElement(
                    propName,
                    indexInList);
        }

        //-----------------------------------------------------------------------
        /**
         * Sets the name of the property. The type of the property must either be a Bean or a List of Beans.
         * @param propName  the new value, not empty
         * @return this, for chaining, not null
         */
        public Builder propName(String propName) {
            JodaBeanUtils.notEmpty(propName, "propName");
            this.propName = propName;
            return this;
        }

        /**
         * Sets if the property given by {@link #propName}is a List, then the Bean at this index
         * inside the List is the bean pointed at by this PropertyPathElement. If this is
         * <code>null</code> then the property is a Bean. If this is not <code>null</code> then the
         * pointed at property is a List.
         * @param indexInList  the new value
         * @return this, for chaining, not null
         */
        public Builder indexInList(Integer indexInList) {
            this.indexInList = indexInList;
            return this;
        }

        //-----------------------------------------------------------------------
        @Override
        public String toString() {
            StringBuilder buf = new StringBuilder(96);
            buf.append("PropertyPathElement.Builder{");
            buf.append("propName").append('=').append(JodaBeanUtils.toString(propName)).append(',').append(' ');
            buf.append("indexInList").append('=').append(JodaBeanUtils.toString(indexInList));
            buf.append('}');
            return buf.toString();
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
