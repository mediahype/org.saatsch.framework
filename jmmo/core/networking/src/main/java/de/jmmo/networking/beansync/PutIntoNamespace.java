package de.jmmo.networking.beansync;

import java.io.Serializable;
 
import org.joda.beans.Bean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

import java.util.Map;
import java.util.Objects;

import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectMetaProperty;

/**
 * Sent from server to client when the server wants the client to put a Bean into it's BeanNamespace
 * 
 * @author saatsch
 *
 */
@BeanDefinition
public class PutIntoNamespace implements Bean, Serializable {

  private static final long serialVersionUID = 1766364868372911605L;

  @PropertyDefinition(set = "")
  private String name;
   
  @PropertyDefinition(set = "")
  private Bean beanToPut;

  private PutIntoNamespace() {
    
  }
  
  /**
   * @param name the name under which to put the bean into the namespace.
   * @param beanToPut the bean. Must be a {@link Serializable} Bean.
   */
  public PutIntoNamespace(String name, Bean beanToPut) {
    super();
    Objects.requireNonNull(name);
    Objects.requireNonNull(beanToPut);
    this.name = name;
    this.beanToPut = beanToPut;
  }

  
  
    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code PutIntoNamespace}.
     * @return the meta-bean, not null
     */
    public static PutIntoNamespace.Meta meta() {
        return PutIntoNamespace.Meta.INSTANCE;
    }

    static {
        MetaBean.register(PutIntoNamespace.Meta.INSTANCE);
    }

    @Override
    public PutIntoNamespace.Meta metaBean() {
        return PutIntoNamespace.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the name.
     * @return the value of the property
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the the {@code name} property.
     * @return the property, not null
     */
    public final Property<String> name() {
        return metaBean().name().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the beanToPut.
     * @return the value of the property
     */
    public Bean getBeanToPut() {
        return beanToPut;
    }

    /**
     * Gets the the {@code beanToPut} property.
     * @return the property, not null
     */
    public final Property<Bean> beanToPut() {
        return metaBean().beanToPut().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public PutIntoNamespace clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            PutIntoNamespace other = (PutIntoNamespace) obj;
            return JodaBeanUtils.equal(getName(), other.getName()) &&
                    JodaBeanUtils.equal(getBeanToPut(), other.getBeanToPut());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getName());
        hash = hash * 31 + JodaBeanUtils.hashCode(getBeanToPut());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("PutIntoNamespace{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
        buf.append("beanToPut").append('=').append(JodaBeanUtils.toString(getBeanToPut())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code PutIntoNamespace}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code name} property.
         */
        private final MetaProperty<String> name = DirectMetaProperty.ofReadOnly(
                this, "name", PutIntoNamespace.class, String.class);
        /**
         * The meta-property for the {@code beanToPut} property.
         */
        private final MetaProperty<Bean> beanToPut = DirectMetaProperty.ofReadOnly(
                this, "beanToPut", PutIntoNamespace.class, Bean.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "name",
                "beanToPut");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3373707:  // name
                    return name;
                case -1982979900:  // beanToPut
                    return beanToPut;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends PutIntoNamespace> builder() {
            return new DirectBeanBuilder<>(new PutIntoNamespace());
        }

        @Override
        public Class<? extends PutIntoNamespace> beanType() {
            return PutIntoNamespace.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code name} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> name() {
            return name;
        }

        /**
         * The meta-property for the {@code beanToPut} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Bean> beanToPut() {
            return beanToPut;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3373707:  // name
                    return ((PutIntoNamespace) bean).getName();
                case -1982979900:  // beanToPut
                    return ((PutIntoNamespace) bean).getBeanToPut();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3373707:  // name
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: name");
                case -1982979900:  // beanToPut
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: beanToPut");
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
