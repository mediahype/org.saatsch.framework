package org.saatsch.framework.jmmo.data;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import org.saatsch.framework.jmmo.data.annotations.JmmoAppId;
import org.saatsch.framework.jmmo.data.annotations.JmmoEditorHidden;
import org.saatsch.framework.jmmo.data.api.Pointer;
import org.saatsch.framework.jmmo.data.api.PointerFactory;
import org.saatsch.framework.jmmo.data.mongo.MongoDataObject;
import dev.morphia.annotations.Entity;

@Entity
@BeanDefinition
public class ExampleBean extends MongoDataObject implements Bean {

  private static final long serialVersionUID = -3604514296121314304L;

@PropertyDefinition
  private String stringProperty = "";

  @PropertyDefinition
  private List<String> listProperty = new ArrayList<>();

  @PropertyDefinition
  private ArrayList<String> arrayListProperty = new ArrayList<>();

  @PropertyDefinition
  private List untypedListProperty = new ArrayList<>();

  @PropertyDefinition
  private Set<String> setProperty = new HashSet<>();


  @PropertyDefinition
  private Pointer<ExampleBean> pointer = PointerFactory.newPointer(ExampleBean.class);

  @PropertyDefinition
  private List<Pointer<String>> listOfPointers = new ArrayList<>();

  @PropertyDefinition
  private List<List<Pointer<String>>> listOfListOfPointers = new ArrayList<>();

  @JmmoAppId
  @PropertyDefinition
  private String appId = "exampleBeanAppId";


  @PropertyDefinition
  private Pointer<ExampleReferencedBean> reference = PointerFactory.newPointer(ExampleReferencedBean.class);

  
  @PropertyDefinition
  private ExampleEnum enumeration = ExampleEnum.BAR;
  
  @PropertyDefinition
  private DerivedBean nestedBean = new DerivedBean();
  
  @PropertyDefinition
  @JmmoEditorHidden
  private Boolean invisibleProperty = Boolean.FALSE;
  

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code ExampleBean}.
     * @return the meta-bean, not null
     */
    public static ExampleBean.Meta meta() {
        return ExampleBean.Meta.INSTANCE;
    }

    static {
        MetaBean.register(ExampleBean.Meta.INSTANCE);
    }

    @Override
    public ExampleBean.Meta metaBean() {
        return ExampleBean.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the stringProperty.
     * @return the value of the property
     */
    public String getStringProperty() {
        return stringProperty;
    }

    /**
     * Sets the stringProperty.
     * @param stringProperty  the new value of the property
     */
    public void setStringProperty(String stringProperty) {
        this.stringProperty = stringProperty;
    }

    /**
     * Gets the the {@code stringProperty} property.
     * @return the property, not null
     */
    public final Property<String> stringProperty() {
        return metaBean().stringProperty().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the listProperty.
     * @return the value of the property
     */
    public List<String> getListProperty() {
        return listProperty;
    }

    /**
     * Sets the listProperty.
     * @param listProperty  the new value of the property
     */
    public void setListProperty(List<String> listProperty) {
        this.listProperty = listProperty;
    }

    /**
     * Gets the the {@code listProperty} property.
     * @return the property, not null
     */
    public final Property<List<String>> listProperty() {
        return metaBean().listProperty().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the arrayListProperty.
     * @return the value of the property
     */
    public ArrayList<String> getArrayListProperty() {
        return arrayListProperty;
    }

    /**
     * Sets the arrayListProperty.
     * @param arrayListProperty  the new value of the property
     */
    public void setArrayListProperty(ArrayList<String> arrayListProperty) {
        this.arrayListProperty = arrayListProperty;
    }

    /**
     * Gets the the {@code arrayListProperty} property.
     * @return the property, not null
     */
    public final Property<ArrayList<String>> arrayListProperty() {
        return metaBean().arrayListProperty().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the untypedListProperty.
     * @return the value of the property
     */
    public List getUntypedListProperty() {
        return untypedListProperty;
    }

    /**
     * Sets the untypedListProperty.
     * @param untypedListProperty  the new value of the property
     */
    public void setUntypedListProperty(List untypedListProperty) {
        this.untypedListProperty = untypedListProperty;
    }

    /**
     * Gets the the {@code untypedListProperty} property.
     * @return the property, not null
     */
    public final Property<List> untypedListProperty() {
        return metaBean().untypedListProperty().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the setProperty.
     * @return the value of the property
     */
    public Set<String> getSetProperty() {
        return setProperty;
    }

    /**
     * Sets the setProperty.
     * @param setProperty  the new value of the property
     */
    public void setSetProperty(Set<String> setProperty) {
        this.setProperty = setProperty;
    }

    /**
     * Gets the the {@code setProperty} property.
     * @return the property, not null
     */
    public final Property<Set<String>> setProperty() {
        return metaBean().setProperty().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the pointer.
     * @return the value of the property
     */
    public Pointer<ExampleBean> getPointer() {
        return pointer;
    }

    /**
     * Sets the pointer.
     * @param pointer  the new value of the property
     */
    public void setPointer(Pointer<ExampleBean> pointer) {
        this.pointer = pointer;
    }

    /**
     * Gets the the {@code pointer} property.
     * @return the property, not null
     */
    public final Property<Pointer<ExampleBean>> pointer() {
        return metaBean().pointer().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the listOfPointers.
     * @return the value of the property
     */
    public List<Pointer<String>> getListOfPointers() {
        return listOfPointers;
    }

    /**
     * Sets the listOfPointers.
     * @param listOfPointers  the new value of the property
     */
    public void setListOfPointers(List<Pointer<String>> listOfPointers) {
        this.listOfPointers = listOfPointers;
    }

    /**
     * Gets the the {@code listOfPointers} property.
     * @return the property, not null
     */
    public final Property<List<Pointer<String>>> listOfPointers() {
        return metaBean().listOfPointers().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the listOfListOfPointers.
     * @return the value of the property
     */
    public List<List<Pointer<String>>> getListOfListOfPointers() {
        return listOfListOfPointers;
    }

    /**
     * Sets the listOfListOfPointers.
     * @param listOfListOfPointers  the new value of the property
     */
    public void setListOfListOfPointers(List<List<Pointer<String>>> listOfListOfPointers) {
        this.listOfListOfPointers = listOfListOfPointers;
    }

    /**
     * Gets the the {@code listOfListOfPointers} property.
     * @return the property, not null
     */
    public final Property<List<List<Pointer<String>>>> listOfListOfPointers() {
        return metaBean().listOfListOfPointers().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the appId.
     * @return the value of the property
     */
    public String getAppId() {
        return appId;
    }

    /**
     * Sets the appId.
     * @param appId  the new value of the property
     */
    public void setAppId(String appId) {
        this.appId = appId;
    }

    /**
     * Gets the the {@code appId} property.
     * @return the property, not null
     */
    public final Property<String> appId() {
        return metaBean().appId().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the reference.
     * @return the value of the property
     */
    public Pointer<ExampleReferencedBean> getReference() {
        return reference;
    }

    /**
     * Sets the reference.
     * @param reference  the new value of the property
     */
    public void setReference(Pointer<ExampleReferencedBean> reference) {
        this.reference = reference;
    }

    /**
     * Gets the the {@code reference} property.
     * @return the property, not null
     */
    public final Property<Pointer<ExampleReferencedBean>> reference() {
        return metaBean().reference().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the enumeration.
     * @return the value of the property
     */
    public ExampleEnum getEnumeration() {
        return enumeration;
    }

    /**
     * Sets the enumeration.
     * @param enumeration  the new value of the property
     */
    public void setEnumeration(ExampleEnum enumeration) {
        this.enumeration = enumeration;
    }

    /**
     * Gets the the {@code enumeration} property.
     * @return the property, not null
     */
    public final Property<ExampleEnum> enumeration() {
        return metaBean().enumeration().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the nestedBean.
     * @return the value of the property
     */
    public DerivedBean getNestedBean() {
        return nestedBean;
    }

    /**
     * Sets the nestedBean.
     * @param nestedBean  the new value of the property
     */
    public void setNestedBean(DerivedBean nestedBean) {
        this.nestedBean = nestedBean;
    }

    /**
     * Gets the the {@code nestedBean} property.
     * @return the property, not null
     */
    public final Property<DerivedBean> nestedBean() {
        return metaBean().nestedBean().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the invisibleProperty.
     * @return the value of the property
     */
    public Boolean getInvisibleProperty() {
        return invisibleProperty;
    }

    /**
     * Sets the invisibleProperty.
     * @param invisibleProperty  the new value of the property
     */
    public void setInvisibleProperty(Boolean invisibleProperty) {
        this.invisibleProperty = invisibleProperty;
    }

    /**
     * Gets the the {@code invisibleProperty} property.
     * @return the property, not null
     */
    public final Property<Boolean> invisibleProperty() {
        return metaBean().invisibleProperty().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public ExampleBean clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            ExampleBean other = (ExampleBean) obj;
            return JodaBeanUtils.equal(getStringProperty(), other.getStringProperty()) &&
                    JodaBeanUtils.equal(getListProperty(), other.getListProperty()) &&
                    JodaBeanUtils.equal(getArrayListProperty(), other.getArrayListProperty()) &&
                    JodaBeanUtils.equal(getUntypedListProperty(), other.getUntypedListProperty()) &&
                    JodaBeanUtils.equal(getSetProperty(), other.getSetProperty()) &&
                    JodaBeanUtils.equal(getPointer(), other.getPointer()) &&
                    JodaBeanUtils.equal(getListOfPointers(), other.getListOfPointers()) &&
                    JodaBeanUtils.equal(getListOfListOfPointers(), other.getListOfListOfPointers()) &&
                    JodaBeanUtils.equal(getAppId(), other.getAppId()) &&
                    JodaBeanUtils.equal(getReference(), other.getReference()) &&
                    JodaBeanUtils.equal(getEnumeration(), other.getEnumeration()) &&
                    JodaBeanUtils.equal(getNestedBean(), other.getNestedBean()) &&
                    JodaBeanUtils.equal(getInvisibleProperty(), other.getInvisibleProperty());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getStringProperty());
        hash = hash * 31 + JodaBeanUtils.hashCode(getListProperty());
        hash = hash * 31 + JodaBeanUtils.hashCode(getArrayListProperty());
        hash = hash * 31 + JodaBeanUtils.hashCode(getUntypedListProperty());
        hash = hash * 31 + JodaBeanUtils.hashCode(getSetProperty());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPointer());
        hash = hash * 31 + JodaBeanUtils.hashCode(getListOfPointers());
        hash = hash * 31 + JodaBeanUtils.hashCode(getListOfListOfPointers());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAppId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getReference());
        hash = hash * 31 + JodaBeanUtils.hashCode(getEnumeration());
        hash = hash * 31 + JodaBeanUtils.hashCode(getNestedBean());
        hash = hash * 31 + JodaBeanUtils.hashCode(getInvisibleProperty());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(448);
        buf.append("ExampleBean{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("stringProperty").append('=').append(JodaBeanUtils.toString(getStringProperty())).append(',').append(' ');
        buf.append("listProperty").append('=').append(JodaBeanUtils.toString(getListProperty())).append(',').append(' ');
        buf.append("arrayListProperty").append('=').append(JodaBeanUtils.toString(getArrayListProperty())).append(',').append(' ');
        buf.append("untypedListProperty").append('=').append(JodaBeanUtils.toString(getUntypedListProperty())).append(',').append(' ');
        buf.append("setProperty").append('=').append(JodaBeanUtils.toString(getSetProperty())).append(',').append(' ');
        buf.append("pointer").append('=').append(JodaBeanUtils.toString(getPointer())).append(',').append(' ');
        buf.append("listOfPointers").append('=').append(JodaBeanUtils.toString(getListOfPointers())).append(',').append(' ');
        buf.append("listOfListOfPointers").append('=').append(JodaBeanUtils.toString(getListOfListOfPointers())).append(',').append(' ');
        buf.append("appId").append('=').append(JodaBeanUtils.toString(getAppId())).append(',').append(' ');
        buf.append("reference").append('=').append(JodaBeanUtils.toString(getReference())).append(',').append(' ');
        buf.append("enumeration").append('=').append(JodaBeanUtils.toString(getEnumeration())).append(',').append(' ');
        buf.append("nestedBean").append('=').append(JodaBeanUtils.toString(getNestedBean())).append(',').append(' ');
        buf.append("invisibleProperty").append('=').append(JodaBeanUtils.toString(getInvisibleProperty())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code ExampleBean}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code stringProperty} property.
         */
        private final MetaProperty<String> stringProperty = DirectMetaProperty.ofReadWrite(
                this, "stringProperty", ExampleBean.class, String.class);
        /**
         * The meta-property for the {@code listProperty} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<String>> listProperty = DirectMetaProperty.ofReadWrite(
                this, "listProperty", ExampleBean.class, (Class) List.class);
        /**
         * The meta-property for the {@code arrayListProperty} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<ArrayList<String>> arrayListProperty = DirectMetaProperty.ofReadWrite(
                this, "arrayListProperty", ExampleBean.class, (Class) ArrayList.class);
        /**
         * The meta-property for the {@code untypedListProperty} property.
         */
        private final MetaProperty<List> untypedListProperty = DirectMetaProperty.ofReadWrite(
                this, "untypedListProperty", ExampleBean.class, List.class);
        /**
         * The meta-property for the {@code setProperty} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Set<String>> setProperty = DirectMetaProperty.ofReadWrite(
                this, "setProperty", ExampleBean.class, (Class) Set.class);
        /**
         * The meta-property for the {@code pointer} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Pointer<ExampleBean>> pointer = DirectMetaProperty.ofReadWrite(
                this, "pointer", ExampleBean.class, (Class) Pointer.class);
        /**
         * The meta-property for the {@code listOfPointers} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<Pointer<String>>> listOfPointers = DirectMetaProperty.ofReadWrite(
                this, "listOfPointers", ExampleBean.class, (Class) List.class);
        /**
         * The meta-property for the {@code listOfListOfPointers} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<List<Pointer<String>>>> listOfListOfPointers = DirectMetaProperty.ofReadWrite(
                this, "listOfListOfPointers", ExampleBean.class, (Class) List.class);
        /**
         * The meta-property for the {@code appId} property.
         */
        private final MetaProperty<String> appId = DirectMetaProperty.ofReadWrite(
                this, "appId", ExampleBean.class, String.class);
        /**
         * The meta-property for the {@code reference} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Pointer<ExampleReferencedBean>> reference = DirectMetaProperty.ofReadWrite(
                this, "reference", ExampleBean.class, (Class) Pointer.class);
        /**
         * The meta-property for the {@code enumeration} property.
         */
        private final MetaProperty<ExampleEnum> enumeration = DirectMetaProperty.ofReadWrite(
                this, "enumeration", ExampleBean.class, ExampleEnum.class);
        /**
         * The meta-property for the {@code nestedBean} property.
         */
        private final MetaProperty<DerivedBean> nestedBean = DirectMetaProperty.ofReadWrite(
                this, "nestedBean", ExampleBean.class, DerivedBean.class);
        /**
         * The meta-property for the {@code invisibleProperty} property.
         */
        private final MetaProperty<Boolean> invisibleProperty = DirectMetaProperty.ofReadWrite(
                this, "invisibleProperty", ExampleBean.class, Boolean.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "stringProperty",
                "listProperty",
                "arrayListProperty",
                "untypedListProperty",
                "setProperty",
                "pointer",
                "listOfPointers",
                "listOfListOfPointers",
                "appId",
                "reference",
                "enumeration",
                "nestedBean",
                "invisibleProperty");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 1890124038:  // stringProperty
                    return stringProperty;
                case 90666131:  // listProperty
                    return listProperty;
                case 1731296652:  // arrayListProperty
                    return arrayListProperty;
                case 1196992676:  // untypedListProperty
                    return untypedListProperty;
                case 996179031:  // setProperty
                    return setProperty;
                case -400605635:  // pointer
                    return pointer;
                case -1622273013:  // listOfPointers
                    return listOfPointers;
                case -1162976640:  // listOfListOfPointers
                    return listOfListOfPointers;
                case 93028124:  // appId
                    return appId;
                case -925155509:  // reference
                    return reference;
                case 1524304455:  // enumeration
                    return enumeration;
                case -889023161:  // nestedBean
                    return nestedBean;
                case -1268972382:  // invisibleProperty
                    return invisibleProperty;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends ExampleBean> builder() {
            return new DirectBeanBuilder<>(new ExampleBean());
        }

        @Override
        public Class<? extends ExampleBean> beanType() {
            return ExampleBean.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code stringProperty} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> stringProperty() {
            return stringProperty;
        }

        /**
         * The meta-property for the {@code listProperty} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<String>> listProperty() {
            return listProperty;
        }

        /**
         * The meta-property for the {@code arrayListProperty} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<ArrayList<String>> arrayListProperty() {
            return arrayListProperty;
        }

        /**
         * The meta-property for the {@code untypedListProperty} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List> untypedListProperty() {
            return untypedListProperty;
        }

        /**
         * The meta-property for the {@code setProperty} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Set<String>> setProperty() {
            return setProperty;
        }

        /**
         * The meta-property for the {@code pointer} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Pointer<ExampleBean>> pointer() {
            return pointer;
        }

        /**
         * The meta-property for the {@code listOfPointers} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<Pointer<String>>> listOfPointers() {
            return listOfPointers;
        }

        /**
         * The meta-property for the {@code listOfListOfPointers} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<List<Pointer<String>>>> listOfListOfPointers() {
            return listOfListOfPointers;
        }

        /**
         * The meta-property for the {@code appId} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> appId() {
            return appId;
        }

        /**
         * The meta-property for the {@code reference} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Pointer<ExampleReferencedBean>> reference() {
            return reference;
        }

        /**
         * The meta-property for the {@code enumeration} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<ExampleEnum> enumeration() {
            return enumeration;
        }

        /**
         * The meta-property for the {@code nestedBean} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<DerivedBean> nestedBean() {
            return nestedBean;
        }

        /**
         * The meta-property for the {@code invisibleProperty} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> invisibleProperty() {
            return invisibleProperty;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 1890124038:  // stringProperty
                    return ((ExampleBean) bean).getStringProperty();
                case 90666131:  // listProperty
                    return ((ExampleBean) bean).getListProperty();
                case 1731296652:  // arrayListProperty
                    return ((ExampleBean) bean).getArrayListProperty();
                case 1196992676:  // untypedListProperty
                    return ((ExampleBean) bean).getUntypedListProperty();
                case 996179031:  // setProperty
                    return ((ExampleBean) bean).getSetProperty();
                case -400605635:  // pointer
                    return ((ExampleBean) bean).getPointer();
                case -1622273013:  // listOfPointers
                    return ((ExampleBean) bean).getListOfPointers();
                case -1162976640:  // listOfListOfPointers
                    return ((ExampleBean) bean).getListOfListOfPointers();
                case 93028124:  // appId
                    return ((ExampleBean) bean).getAppId();
                case -925155509:  // reference
                    return ((ExampleBean) bean).getReference();
                case 1524304455:  // enumeration
                    return ((ExampleBean) bean).getEnumeration();
                case -889023161:  // nestedBean
                    return ((ExampleBean) bean).getNestedBean();
                case -1268972382:  // invisibleProperty
                    return ((ExampleBean) bean).getInvisibleProperty();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 1890124038:  // stringProperty
                    ((ExampleBean) bean).setStringProperty((String) newValue);
                    return;
                case 90666131:  // listProperty
                    ((ExampleBean) bean).setListProperty((List<String>) newValue);
                    return;
                case 1731296652:  // arrayListProperty
                    ((ExampleBean) bean).setArrayListProperty((ArrayList<String>) newValue);
                    return;
                case 1196992676:  // untypedListProperty
                    ((ExampleBean) bean).setUntypedListProperty((List) newValue);
                    return;
                case 996179031:  // setProperty
                    ((ExampleBean) bean).setSetProperty((Set<String>) newValue);
                    return;
                case -400605635:  // pointer
                    ((ExampleBean) bean).setPointer((Pointer<ExampleBean>) newValue);
                    return;
                case -1622273013:  // listOfPointers
                    ((ExampleBean) bean).setListOfPointers((List<Pointer<String>>) newValue);
                    return;
                case -1162976640:  // listOfListOfPointers
                    ((ExampleBean) bean).setListOfListOfPointers((List<List<Pointer<String>>>) newValue);
                    return;
                case 93028124:  // appId
                    ((ExampleBean) bean).setAppId((String) newValue);
                    return;
                case -925155509:  // reference
                    ((ExampleBean) bean).setReference((Pointer<ExampleReferencedBean>) newValue);
                    return;
                case 1524304455:  // enumeration
                    ((ExampleBean) bean).setEnumeration((ExampleEnum) newValue);
                    return;
                case -889023161:  // nestedBean
                    ((ExampleBean) bean).setNestedBean((DerivedBean) newValue);
                    return;
                case -1268972382:  // invisibleProperty
                    ((ExampleBean) bean).setInvisibleProperty((Boolean) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
