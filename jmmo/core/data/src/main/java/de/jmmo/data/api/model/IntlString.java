package de.jmmo.data.api.model;

import java.util.HashMap;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import de.jmmo.data.mongo.MongoDataObject;
import dev.morphia.annotations.Entity;
import dev.morphia.annotations.Field;
import dev.morphia.annotations.Index;
import dev.morphia.annotations.IndexOptions;
import dev.morphia.annotations.Indexes;

/**
 * the persistence model of an internationalizable String.
 * One instance of this class holds all available translations for a String.
 * 
 * @author saatsch
 *
 */
@Entity("JmmoIntlString")
@Indexes(@Index(fields = {@Field(value = "coordinate")}, options = @IndexOptions(unique = true)))
@BeanDefinition
public class IntlString extends MongoDataObject implements Bean {

  private static final long serialVersionUID = 1L;

  /**
   * the coordinate of the String. Defines this {@link IntlString}'s uniqueness.
   */
  @PropertyDefinition
  private String coordinate;

  /**
   * the localized strings
   */
  @PropertyDefinition
  private Map<String, String> strings = new HashMap<>();

  
  public String forLanguage(String lang) {
    
    // if there is only one language, return it
    if (strings.size() == 1) {
      return strings.entrySet().iterator().next().getValue();
    }
    
    // TODO: react, if language not present.
    return strings.get(lang);
    
  }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code IntlString}.
     * @return the meta-bean, not null
     */
    public static IntlString.Meta meta() {
        return IntlString.Meta.INSTANCE;
    }

    static {
        MetaBean.register(IntlString.Meta.INSTANCE);
    }

    @Override
    public IntlString.Meta metaBean() {
        return IntlString.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the coordinate of the String. Defines this {@link IntlString}'s uniqueness.
     * @return the value of the property
     */
    public String getCoordinate() {
        return coordinate;
    }

    /**
     * Sets the coordinate of the String. Defines this {@link IntlString}'s uniqueness.
     * @param coordinate  the new value of the property
     */
    public void setCoordinate(String coordinate) {
        this.coordinate = coordinate;
    }

    /**
     * Gets the the {@code coordinate} property.
     * @return the property, not null
     */
    public final Property<String> coordinate() {
        return metaBean().coordinate().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the localized strings
     * @return the value of the property
     */
    public Map<String, String> getStrings() {
        return strings;
    }

    /**
     * Sets the localized strings
     * @param strings  the new value of the property
     */
    public void setStrings(Map<String, String> strings) {
        this.strings = strings;
    }

    /**
     * Gets the the {@code strings} property.
     * @return the property, not null
     */
    public final Property<Map<String, String>> strings() {
        return metaBean().strings().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public IntlString clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            IntlString other = (IntlString) obj;
            return JodaBeanUtils.equal(getCoordinate(), other.getCoordinate()) &&
                    JodaBeanUtils.equal(getStrings(), other.getStrings());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getCoordinate());
        hash = hash * 31 + JodaBeanUtils.hashCode(getStrings());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("IntlString{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("coordinate").append('=').append(JodaBeanUtils.toString(getCoordinate())).append(',').append(' ');
        buf.append("strings").append('=').append(JodaBeanUtils.toString(getStrings())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code IntlString}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code coordinate} property.
         */
        private final MetaProperty<String> coordinate = DirectMetaProperty.ofReadWrite(
                this, "coordinate", IntlString.class, String.class);
        /**
         * The meta-property for the {@code strings} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Map<String, String>> strings = DirectMetaProperty.ofReadWrite(
                this, "strings", IntlString.class, (Class) Map.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "coordinate",
                "strings");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 198931832:  // coordinate
                    return coordinate;
                case -1881759102:  // strings
                    return strings;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends IntlString> builder() {
            return new DirectBeanBuilder<>(new IntlString());
        }

        @Override
        public Class<? extends IntlString> beanType() {
            return IntlString.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code coordinate} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> coordinate() {
            return coordinate;
        }

        /**
         * The meta-property for the {@code strings} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Map<String, String>> strings() {
            return strings;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 198931832:  // coordinate
                    return ((IntlString) bean).getCoordinate();
                case -1881759102:  // strings
                    return ((IntlString) bean).getStrings();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 198931832:  // coordinate
                    ((IntlString) bean).setCoordinate((String) newValue);
                    return;
                case -1881759102:  // strings
                    ((IntlString) bean).setStrings((Map<String, String>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
