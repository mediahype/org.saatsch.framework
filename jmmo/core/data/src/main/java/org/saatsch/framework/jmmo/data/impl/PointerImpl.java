package org.saatsch.framework.jmmo.data.impl;

import java.io.Serializable;
import java.util.Map;
import java.util.Optional;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import org.saatsch.framework.jmmo.data.api.Pointer;
import org.saatsch.framework.jmmo.data.api.PointerUtil;
import org.saatsch.framework.jmmo.data.api.PropertyUtil;

@BeanDefinition
public class PointerImpl<E> implements Pointer<E>, Bean, Serializable {

  private static final long serialVersionUID = -8126706889109553245L;
  
  @PropertyDefinition
  private String appId;
  
  /**
   * the class of the data to which this pointer points.
   */
  @PropertyDefinition
  private Class<?> baseClass;
  

  /* (non-Javadoc)
   * @see de.jmmo.data.modelling.Pointer#setTargetCoodinate(java.lang.Class, java.lang.String)
   */
  @Override
  public PointerImpl<E> setTargetCoodinate(Class<?> baseClass, String appId) {
    this.baseClass = baseClass;
    this.appId = appId;
    return this;
  }

 
  public String asString(){
    
    if (baseClass == null || appId == null) {
      return "uninitialized";
    }
    
    // TODO: this is evil. 
    Optional<E> resolve = PointerUtil.resolveOptional(this);
    
    
    if (!resolve.isPresent()){
      return appId + " (Unknown)";
    }
    
    return PropertyUtil.getFullName((Bean) resolve.get());
    
  }
  
  @Override
  public String toString() {
    if (baseClass != null && appId != null) {
      return asString();      
    }
    return super.toString();
  }
  
  @Override
  public boolean isValid() {
    return appId != null && baseClass != null;
  }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code PointerImpl}.
     * @return the meta-bean, not null
     */
    @SuppressWarnings("rawtypes")
    public static PointerImpl.Meta meta() {
        return PointerImpl.Meta.INSTANCE;
    }

    /**
     * The meta-bean for {@code PointerImpl}.
     * @param <R>  the bean's generic type
     * @param cls  the bean's generic type
     * @return the meta-bean, not null
     */
    @SuppressWarnings("unchecked")
    public static <R> PointerImpl.Meta<R> metaPointerImpl(Class<R> cls) {
        return PointerImpl.Meta.INSTANCE;
    }

    static {
        MetaBean.register(PointerImpl.Meta.INSTANCE);
    }

    @SuppressWarnings("unchecked")
    @Override
    public PointerImpl.Meta<E> metaBean() {
        return PointerImpl.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the appId.
     * @return the value of the property
     */
    public String getAppId() {
        return appId;
    }

    /**
     * Sets the appId.
     * @param appId  the new value of the property
     */
    public void setAppId(String appId) {
        this.appId = appId;
    }

    /**
     * Gets the the {@code appId} property.
     * @return the property, not null
     */
    public final Property<String> appId() {
        return metaBean().appId().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the class of the data to which this pointer points.
     * @return the value of the property
     */
    public Class<?> getBaseClass() {
        return baseClass;
    }

    /**
     * Sets the class of the data to which this pointer points.
     * @param baseClass  the new value of the property
     */
    public void setBaseClass(Class<?> baseClass) {
        this.baseClass = baseClass;
    }

    /**
     * Gets the the {@code baseClass} property.
     * @return the property, not null
     */
    public final Property<Class<?>> baseClass() {
        return metaBean().baseClass().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public PointerImpl<E> clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            PointerImpl<?> other = (PointerImpl<?>) obj;
            return JodaBeanUtils.equal(getAppId(), other.getAppId()) &&
                    JodaBeanUtils.equal(getBaseClass(), other.getBaseClass());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getAppId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getBaseClass());
        return hash;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code PointerImpl}.
     * @param <E>  the type
     */
    public static class Meta<E> extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        @SuppressWarnings("rawtypes")
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code appId} property.
         */
        private final MetaProperty<String> appId = DirectMetaProperty.ofReadWrite(
                this, "appId", PointerImpl.class, String.class);
        /**
         * The meta-property for the {@code baseClass} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Class<?>> baseClass = DirectMetaProperty.ofReadWrite(
                this, "baseClass", PointerImpl.class, (Class) Class.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "appId",
                "baseClass");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 93028124:  // appId
                    return appId;
                case -1842524889:  // baseClass
                    return baseClass;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends PointerImpl<E>> builder() {
            return new DirectBeanBuilder<>(new PointerImpl<E>());
        }

        @SuppressWarnings({"unchecked", "rawtypes" })
        @Override
        public Class<? extends PointerImpl<E>> beanType() {
            return (Class) PointerImpl.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code appId} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> appId() {
            return appId;
        }

        /**
         * The meta-property for the {@code baseClass} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Class<?>> baseClass() {
            return baseClass;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 93028124:  // appId
                    return ((PointerImpl<?>) bean).getAppId();
                case -1842524889:  // baseClass
                    return ((PointerImpl<?>) bean).getBaseClass();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 93028124:  // appId
                    ((PointerImpl<E>) bean).setAppId((String) newValue);
                    return;
                case -1842524889:  // baseClass
                    ((PointerImpl<E>) bean).setBaseClass((Class<?>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
