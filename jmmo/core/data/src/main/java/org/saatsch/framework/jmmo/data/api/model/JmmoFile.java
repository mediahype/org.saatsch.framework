package org.saatsch.framework.jmmo.data.api.model;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import org.saatsch.framework.jmmo.data.annotations.JmmoAppId;
import org.saatsch.framework.jmmo.data.annotations.JmmoGivingName;
import org.saatsch.framework.jmmo.data.mongo.MongoDataObject;
import dev.morphia.annotations.Entity;
import dev.morphia.annotations.Field;
import dev.morphia.annotations.Index;
import dev.morphia.annotations.IndexOptions;
import dev.morphia.annotations.Indexes;

/**
 * contains metadata for a file.
 * 
 * @author saatsch
 *
 */
@Entity("JmmoFiles")
@Indexes(@Index(fields = {@Field(value = "filename")}, options = @IndexOptions(unique = true)))
@BeanDefinition
public class JmmoFile extends MongoDataObject implements Bean { 

  private static final long serialVersionUID = -1719634909502809758L;

  /**
   * the name of this image file.
   */
  @PropertyDefinition
  @JmmoAppId
  @JmmoGivingName
  private String filename;
  
 
    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code JmmoFile}.
     * @return the meta-bean, not null
     */
    public static JmmoFile.Meta meta() {
        return JmmoFile.Meta.INSTANCE;
    }

    static {
        MetaBean.register(JmmoFile.Meta.INSTANCE);
    }

    @Override
    public JmmoFile.Meta metaBean() {
        return JmmoFile.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the name of this image file.
     * @return the value of the property
     */
    public String getFilename() {
        return filename;
    }

    /**
     * Sets the name of this image file.
     * @param filename  the new value of the property
     */
    public void setFilename(String filename) {
        this.filename = filename;
    }

    /**
     * Gets the the {@code filename} property.
     * @return the property, not null
     */
    public final Property<String> filename() {
        return metaBean().filename().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public JmmoFile clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            JmmoFile other = (JmmoFile) obj;
            return JodaBeanUtils.equal(getFilename(), other.getFilename());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getFilename());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(64);
        buf.append("JmmoFile{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("filename").append('=').append(JodaBeanUtils.toString(getFilename())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code JmmoFile}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code filename} property.
         */
        private final MetaProperty<String> filename = DirectMetaProperty.ofReadWrite(
                this, "filename", JmmoFile.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "filename");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -734768633:  // filename
                    return filename;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends JmmoFile> builder() {
            return new DirectBeanBuilder<>(new JmmoFile());
        }

        @Override
        public Class<? extends JmmoFile> beanType() {
            return JmmoFile.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code filename} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> filename() {
            return filename;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -734768633:  // filename
                    return ((JmmoFile) bean).getFilename();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -734768633:  // filename
                    ((JmmoFile) bean).setFilename((String) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
