package org.saatsch.framework.jmmo.data.impl;

import static java.util.Objects.requireNonNull;

import org.bson.types.ObjectId;
import org.joda.beans.Bean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

import org.saatsch.framework.jmmo.data.api.MongoPointer;
import org.saatsch.framework.jmmo.data.api.PointerUtil;
import java.util.Map;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class MongoPointerImpl<E> implements MongoPointer<E>, Bean {

  private static final long serialVersionUID = -8096434219192016802L;

  @PropertyDefinition(set = "")
  private Class<?> baseClass;
  
  @PropertyDefinition(set = "")
  private ObjectId objectId;


  @Override
  public MongoPointer<E> setTargetCoodinate(Class<?> baseClass, ObjectId objectId) {
    this.baseClass = requireNonNull(baseClass);
    this.objectId = requireNonNull(objectId);
    return this;
  }

  @Override
  public E resolve() {
    return PointerUtil.resolve(this);
  }

  @Override
  public boolean isValid() {
    return objectId != null;
  }


    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code MongoPointerImpl}.
     * @return the meta-bean, not null
     */
    @SuppressWarnings("rawtypes")
    public static MongoPointerImpl.Meta meta() {
        return MongoPointerImpl.Meta.INSTANCE;
    }

    /**
     * The meta-bean for {@code MongoPointerImpl}.
     * @param <R>  the bean's generic type
     * @param cls  the bean's generic type
     * @return the meta-bean, not null
     */
    @SuppressWarnings("unchecked")
    public static <R> MongoPointerImpl.Meta<R> metaMongoPointerImpl(Class<R> cls) {
        return MongoPointerImpl.Meta.INSTANCE;
    }

    static {
        MetaBean.register(MongoPointerImpl.Meta.INSTANCE);
    }

    @SuppressWarnings("unchecked")
    @Override
    public MongoPointerImpl.Meta<E> metaBean() {
        return MongoPointerImpl.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the baseClass.
     * @return the value of the property
     */
    public Class<?> getBaseClass() {
        return baseClass;
    }

    /**
     * Gets the the {@code baseClass} property.
     * @return the property, not null
     */
    public final Property<Class<?>> baseClass() {
        return metaBean().baseClass().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the objectId.
     * @return the value of the property
     */
    public ObjectId getObjectId() {
        return objectId;
    }

    /**
     * Gets the the {@code objectId} property.
     * @return the property, not null
     */
    public final Property<ObjectId> objectId() {
        return metaBean().objectId().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public MongoPointerImpl<E> clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            MongoPointerImpl<?> other = (MongoPointerImpl<?>) obj;
            return JodaBeanUtils.equal(getBaseClass(), other.getBaseClass()) &&
                    JodaBeanUtils.equal(getObjectId(), other.getObjectId());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getBaseClass());
        hash = hash * 31 + JodaBeanUtils.hashCode(getObjectId());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("MongoPointerImpl{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("baseClass").append('=').append(JodaBeanUtils.toString(getBaseClass())).append(',').append(' ');
        buf.append("objectId").append('=').append(JodaBeanUtils.toString(getObjectId())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code MongoPointerImpl}.
     * @param <E>  the type
     */
    public static class Meta<E> extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        @SuppressWarnings("rawtypes")
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code baseClass} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Class<?>> baseClass = DirectMetaProperty.ofReadOnly(
                this, "baseClass", MongoPointerImpl.class, (Class) Class.class);
        /**
         * The meta-property for the {@code objectId} property.
         */
        private final MetaProperty<ObjectId> objectId = DirectMetaProperty.ofReadOnly(
                this, "objectId", MongoPointerImpl.class, ObjectId.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "baseClass",
                "objectId");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -1842524889:  // baseClass
                    return baseClass;
                case 90495162:  // objectId
                    return objectId;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends MongoPointerImpl<E>> builder() {
            return new DirectBeanBuilder<>(new MongoPointerImpl<E>());
        }

        @SuppressWarnings({"unchecked", "rawtypes" })
        @Override
        public Class<? extends MongoPointerImpl<E>> beanType() {
            return (Class) MongoPointerImpl.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code baseClass} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Class<?>> baseClass() {
            return baseClass;
        }

        /**
         * The meta-property for the {@code objectId} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<ObjectId> objectId() {
            return objectId;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1842524889:  // baseClass
                    return ((MongoPointerImpl<?>) bean).getBaseClass();
                case 90495162:  // objectId
                    return ((MongoPointerImpl<?>) bean).getObjectId();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1842524889:  // baseClass
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: baseClass");
                case 90495162:  // objectId
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: objectId");
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
