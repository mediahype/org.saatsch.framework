package org.saatsch.framework.jmmo.data.editor.fx.model;

import dev.morphia.annotations.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.saatsch.framework.base.jfxbase.control.Button;
import org.saatsch.framework.jmmo.data.api.Pointer;
import org.saatsch.framework.jmmo.data.api.PointerFactory;
import org.saatsch.framework.jmmo.data.api.PointerUtil;
import org.saatsch.framework.jmmo.data.mongo.EditorObject;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
@Entity("Base_Unit")
@Indexes(@Index(fields = {@Field(value = "appId")}, options = @IndexOptions(unique = true)))
public class UnitBase extends EditorObject {

  @PropertyDefinition
  private String someProperty;

  @PropertyDefinition
  private Pointer<ButtonBase> button = PointerFactory.newPointer(ButtonBase.class);

  @PropertyDefinition
  private List<Pointer<ButtonBase>> pointerList = new ArrayList<>();



    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code UnitBase}.
     * @return the meta-bean, not null
     */
    public static UnitBase.Meta meta() {
        return UnitBase.Meta.INSTANCE;
    }

    static {
        MetaBean.register(UnitBase.Meta.INSTANCE);
    }

    @Override
    public UnitBase.Meta metaBean() {
        return UnitBase.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the someProperty.
     * @return the value of the property
     */
    public String getSomeProperty() {
        return someProperty;
    }

    /**
     * Sets the someProperty.
     * @param someProperty  the new value of the property
     */
    public void setSomeProperty(String someProperty) {
        this.someProperty = someProperty;
    }

    /**
     * Gets the the {@code someProperty} property.
     * @return the property, not null
     */
    public final Property<String> someProperty() {
        return metaBean().someProperty().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the button.
     * @return the value of the property
     */
    public Pointer<ButtonBase> getButton() {
        return button;
    }

    /**
     * Sets the button.
     * @param button  the new value of the property
     */
    public void setButton(Pointer<ButtonBase> button) {
        this.button = button;
    }

    /**
     * Gets the the {@code button} property.
     * @return the property, not null
     */
    public final Property<Pointer<ButtonBase>> button() {
        return metaBean().button().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the pointerList.
     * @return the value of the property
     */
    public List<Pointer<ButtonBase>> getPointerList() {
        return pointerList;
    }

    /**
     * Sets the pointerList.
     * @param pointerList  the new value of the property
     */
    public void setPointerList(List<Pointer<ButtonBase>> pointerList) {
        this.pointerList = pointerList;
    }

    /**
     * Gets the the {@code pointerList} property.
     * @return the property, not null
     */
    public final Property<List<Pointer<ButtonBase>>> pointerList() {
        return metaBean().pointerList().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public UnitBase clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            UnitBase other = (UnitBase) obj;
            return JodaBeanUtils.equal(getSomeProperty(), other.getSomeProperty()) &&
                    JodaBeanUtils.equal(getButton(), other.getButton()) &&
                    JodaBeanUtils.equal(getPointerList(), other.getPointerList()) &&
                    super.equals(obj);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = hash * 31 + JodaBeanUtils.hashCode(getSomeProperty());
        hash = hash * 31 + JodaBeanUtils.hashCode(getButton());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPointerList());
        return hash ^ super.hashCode();
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(128);
        buf.append("UnitBase{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    @Override
    protected void toString(StringBuilder buf) {
        super.toString(buf);
        buf.append("someProperty").append('=').append(JodaBeanUtils.toString(getSomeProperty())).append(',').append(' ');
        buf.append("button").append('=').append(JodaBeanUtils.toString(getButton())).append(',').append(' ');
        buf.append("pointerList").append('=').append(JodaBeanUtils.toString(getPointerList())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code UnitBase}.
     */
    public static class Meta extends EditorObject.Meta {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code someProperty} property.
         */
        private final MetaProperty<String> someProperty = DirectMetaProperty.ofReadWrite(
                this, "someProperty", UnitBase.class, String.class);
        /**
         * The meta-property for the {@code button} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Pointer<ButtonBase>> button = DirectMetaProperty.ofReadWrite(
                this, "button", UnitBase.class, (Class) Pointer.class);
        /**
         * The meta-property for the {@code pointerList} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<Pointer<ButtonBase>>> pointerList = DirectMetaProperty.ofReadWrite(
                this, "pointerList", UnitBase.class, (Class) List.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, (DirectMetaPropertyMap) super.metaPropertyMap(),
                "someProperty",
                "button",
                "pointerList");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 1323565801:  // someProperty
                    return someProperty;
                case -1377687758:  // button
                    return button;
                case 768605307:  // pointerList
                    return pointerList;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends UnitBase> builder() {
            return new DirectBeanBuilder<>(new UnitBase());
        }

        @Override
        public Class<? extends UnitBase> beanType() {
            return UnitBase.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code someProperty} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> someProperty() {
            return someProperty;
        }

        /**
         * The meta-property for the {@code button} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Pointer<ButtonBase>> button() {
            return button;
        }

        /**
         * The meta-property for the {@code pointerList} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<Pointer<ButtonBase>>> pointerList() {
            return pointerList;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 1323565801:  // someProperty
                    return ((UnitBase) bean).getSomeProperty();
                case -1377687758:  // button
                    return ((UnitBase) bean).getButton();
                case 768605307:  // pointerList
                    return ((UnitBase) bean).getPointerList();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 1323565801:  // someProperty
                    ((UnitBase) bean).setSomeProperty((String) newValue);
                    return;
                case -1377687758:  // button
                    ((UnitBase) bean).setButton((Pointer<ButtonBase>) newValue);
                    return;
                case 768605307:  // pointerList
                    ((UnitBase) bean).setPointerList((List<Pointer<ButtonBase>>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
