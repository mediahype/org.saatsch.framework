package org.saatsch.framework.jmmo.data.editor.fx.model;


import dev.morphia.annotations.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.saatsch.framework.jmmo.data.annotations.JmmoString;
import org.saatsch.framework.jmmo.data.mongo.EditorObject;

import java.util.*;

import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.Bean;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectMetaProperty;
import java.util.Map;


@BeanDefinition
@Entity("Base_Button")
@Indexes(@Index(fields = {@Field(value = "appId")}, options = @IndexOptions(unique = true)))
public class ButtonBase extends EditorObject {

    @PropertyDefinition
    private List<String> testStringList = new ArrayList<>();

    @PropertyDefinition
    private Set<String> testStringSet = new TreeSet<>();

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code ButtonBase}.
     * @return the meta-bean, not null
     */
    public static ButtonBase.Meta meta() {
        return ButtonBase.Meta.INSTANCE;
    }

    static {
        MetaBean.register(ButtonBase.Meta.INSTANCE);
    }

    @Override
    public ButtonBase.Meta metaBean() {
        return ButtonBase.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the testStringList.
     * @return the value of the property
     */
    public List<String> getTestStringList() {
        return testStringList;
    }

    /**
     * Sets the testStringList.
     * @param testStringList  the new value of the property
     */
    public void setTestStringList(List<String> testStringList) {
        this.testStringList = testStringList;
    }

    /**
     * Gets the the {@code testStringList} property.
     * @return the property, not null
     */
    public final Property<List<String>> testStringList() {
        return metaBean().testStringList().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the testStringSet.
     * @return the value of the property
     */
    public Set<String> getTestStringSet() {
        return testStringSet;
    }

    /**
     * Sets the testStringSet.
     * @param testStringSet  the new value of the property
     */
    public void setTestStringSet(Set<String> testStringSet) {
        this.testStringSet = testStringSet;
    }

    /**
     * Gets the the {@code testStringSet} property.
     * @return the property, not null
     */
    public final Property<Set<String>> testStringSet() {
        return metaBean().testStringSet().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public ButtonBase clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            ButtonBase other = (ButtonBase) obj;
            return JodaBeanUtils.equal(getTestStringList(), other.getTestStringList()) &&
                    JodaBeanUtils.equal(getTestStringSet(), other.getTestStringSet()) &&
                    super.equals(obj);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = hash * 31 + JodaBeanUtils.hashCode(getTestStringList());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTestStringSet());
        return hash ^ super.hashCode();
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("ButtonBase{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    @Override
    protected void toString(StringBuilder buf) {
        super.toString(buf);
        buf.append("testStringList").append('=').append(JodaBeanUtils.toString(getTestStringList())).append(',').append(' ');
        buf.append("testStringSet").append('=').append(JodaBeanUtils.toString(getTestStringSet())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code ButtonBase}.
     */
    public static class Meta extends EditorObject.Meta {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code testStringList} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<String>> testStringList = DirectMetaProperty.ofReadWrite(
                this, "testStringList", ButtonBase.class, (Class) List.class);
        /**
         * The meta-property for the {@code testStringSet} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Set<String>> testStringSet = DirectMetaProperty.ofReadWrite(
                this, "testStringSet", ButtonBase.class, (Class) Set.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, (DirectMetaPropertyMap) super.metaPropertyMap(),
                "testStringList",
                "testStringSet");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 2007639681:  // testStringList
                    return testStringList;
                case 480411167:  // testStringSet
                    return testStringSet;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends ButtonBase> builder() {
            return new DirectBeanBuilder<>(new ButtonBase());
        }

        @Override
        public Class<? extends ButtonBase> beanType() {
            return ButtonBase.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code testStringList} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<String>> testStringList() {
            return testStringList;
        }

        /**
         * The meta-property for the {@code testStringSet} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Set<String>> testStringSet() {
            return testStringSet;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 2007639681:  // testStringList
                    return ((ButtonBase) bean).getTestStringList();
                case 480411167:  // testStringSet
                    return ((ButtonBase) bean).getTestStringSet();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 2007639681:  // testStringList
                    ((ButtonBase) bean).setTestStringList((List<String>) newValue);
                    return;
                case 480411167:  // testStringSet
                    ((ButtonBase) bean).setTestStringSet((Set<String>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
